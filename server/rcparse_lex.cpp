#line 2 "rcparse_lex.cpp"

#line 4 "rcparse_lex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 93
#define YY_END_OF_BUFFER 94
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[482] =
    {   0,
        0,    0,   94,   92,   91,   82,   90,   84,   87,   86,
       86,   83,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   91,   90,   89,   90,   84,
       86,   88,   88,   86,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   52,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,

       90,   89,   90,   86,   85,   85,   70,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   15,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   45,   53,   85,   85,   85,   85,
       85,   77,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   37,   85,   85,
       74,   81,   85,   85,   85,   85,   40,   71,   85,   76,
       85,   85,   11,   85,   85,   85,   85,   85,   85,   85,

       42,   57,   85,   85,   85,   16,   85,   85,   19,   21,
       85,   22,   47,   85,   23,   85,   85,   85,   85,   36,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   33,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   73,   63,   85,   85,   85,   39,   85,   85,
       85,   85,   35,   85,   85,   75,   85,   85,   85,   43,
       85,   85,   85,   85,   85,   85,   17,   85,   46,   48,
       85,   85,   85,   58,   85,   85,   85,   85,   85,   72,
       31,   85,   85,   85,   85,   80,   85,   85,   85,   55,
       85,   85,   85,   85,   85,   85,    5,    6,   38,   85,

       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   18,   85,   85,   85,   85,   25,   85,
       85,   28,   85,   85,   85,   30,   85,   85,   54,   34,
       79,   27,   85,   85,   85,   62,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   12,   85,   85,   85,
       85,   85,   78,   85,   85,   85,   85,   85,   85,   85,
       50,   85,   24,   85,   85,   85,   61,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   65,   56,   85,   44,   66,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,

       85,    1,    2,    3,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   67,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,    4,
       85,   85,   85,   85,    7,    8,   85,   68,   41,   85,
       85,   20,   85,   49,   85,   85,   85,   85,   85,   85,
       51,   85,   59,   85,   85,   85,   85,   13,   14,   85,
       85,   85,   85,   85,   85,   64,   85,    9,   10,   26,
       85,   29,   32,   85,   85,   85,   69,   85,   85,   60,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    1,    6,
        6,    1,    6,    1,    7,    1,    1,    8,    9,    9,
        9,    9,    9,    9,    9,   10,   11,    1,   12,    1,
        1,    1,    1,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   22,   34,   35,   36,   22,
        1,   37,    1,    1,   22,    1,   38,   39,   40,   41,

       42,   43,   44,   45,   46,   22,   47,   48,   49,   50,
       51,   52,   22,   53,   54,   55,   56,   57,   58,   59,
       60,   61,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[62] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    4,    4,    4,
        4,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4
    } ;

static const flex_int16_t yy_base[488] =
    {   0,
        0,    0, 1014, 1015, 1011, 1015,   58,    0, 1015,   55,
       57, 1015,   62,   67,   65,   64,   63,   68,   78,   66,
       77, 1005,   86,   87,   92,   91,   94,  101,   79,  110,
      129,  104,  134,  133,  138, 1009,  145, 1015,  154,    0,
       68,    0,  184,   70,    0, 1003,  152,  140,  153,  143,
      144,  158,  157,  160,  156,  161,  166,  163,  178,  181,
      155,  146,  202,  180,  169,  206,  214,  221,  222,  223,
      225,  226,  227,  228,  229,  233,  232,  230,  235, 1002,
      234,  238,  240,  246,  256,  231,  236,  242,  248,  263,
      239,  252,  254,  247,  259,  260,  261,  264,  257,  269,

      298,  304,  308,    0,  306,  308,   82,  309,  310,  311,
      313,  312,  314,  317,  318,  316,  319,  321,  320,  322,
      323,  326,  324,  325,  329,  327,  330,  342,  331,  337,
      339,  347,  343, 1001,  341,  335,  344,  353,  336,  348,
      354,  357,  358,  361, 1000,  999,  365,  381,  384,  386,
      385,  998,  389,  390,  387,  395,  399,  391,  394,  396,
      401,  392,  405,  398,  400,  402,  406,  407,  410,  408,
      412,  411,  415,  414,  416,  417,  420,  997,  422,  423,
      996,  995,  418,  421,  424,  441,  994,  993,  445,  992,
      450,  451,  452,  456,  464,  466,  467,  468,  469,  472,

      991,  990,  473,  471,  474,  478,  479,  480,  481,  989,
      487,  988,  987,  490,  986,  493,  482,  495,  483,  985,
      494,  496,  499,  484,  500,  485,  502,  504,  507,  512,
      508,  984,  506,  511,  513,  521,  523,  524,  535,  530,
      527,  534,  983,  982,  538,  539,  540,  981,  542,  543,
      548,  552,  980,  554,  560,  979,  559,  563,  561,  978,
      562,  564,  565,  566,  571,  572,  977,  575,  244,  568,
      567,  576,  569,  976,  577,  583,  579,  589,  590,  975,
      974,  591,  593,  595,  596,  973,  597,  598,  599,  972,
      605,  612,  616,  617,   76,  613,  971,  622,  970,   75,

      645,  618,  619,  621,  623,  625,  626,  629,  635,  630,
      636,  639,  632,  969,  644,  647,  650,  653,  654,  655,
      658,  968,  659,  671,  660,  967,  674,  677,  966,  680,
      965,  964,  679,  681,  683,  963,  685,  686,  687,  688,
      689,  692,  693,  701,  699,  700,  962,  702,  704,  705,
      711,  709,  961,  712,  713,  706,  720,  717,  710,  715,
      960,  716,  959,  727,  719,  728,  958,  725,  721,  729,
      731,  738,  733,  739,  740,  743,  753,  755,  756,  759,
      765,  767,  769,  770,  772,  957,  946,  773,  937,  936,
      775,  776,  777,  779,  778,  780,  786,  784,  787,  781,

      788,  935,  934,  932,  789,  797,  791,  798,  792,  793,
      799,  795,  807,  796,  800,  801,  809,  930,  815,  816,
      817,  818,  821,  840,  819,  834,  822,  845,  846,  928,
      849,  852,  851,  855,  927,  915,  856,  912,  911,  861,
      857,  910,  862,  907,  866,  868,  864,  867,  871,  869,
      903,  870,  900,  872,  874,  875,  876,  898,  895,  879,
      873,  877,  880,  878,  888,  882,  887,  245,  243,  241,
      881,  159,   90,  883,  889,  894,   89,  896,  897,   85,
     1015,  947,  951,   83,  953,  957,  959
    } ;

static const flex_int16_t yy_def[488] =
    {   0,
      481,    1,  481,  481,  481,  481,  482,  483,  481,  484,
      484,  481,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  481,  482,  481,  486,  483,
      484,  484,  484,  484,  487,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,

      482,  482,  486,   43,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,

      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,

      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,

      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
        0,  481,  481,  481,  481,  481,  481
    } ;

static const flex_int16_t yy_nxt[1077] =
    {   0,
        4,    5,    6,    7,    8,    9,    9,   10,   11,   11,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   22,   33,   22,   34,    4,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   35,   22,   22,   22,   22,   22,   22,
       22,   38,   41,   41,   44,   44,   44,   44,   45,   45,
       45,   45,   45,   45,   45,   41,   41,   44,   44,   44,
       44,   45,   45,   45,   45,   45,   42,  341,   45,   43,
      337,   45,   45,   45,   39,   45,   45,   45,   45,  175,

       45,   47,   48,   62,   50,   61,   55,   45,   51,   49,
       45,   68,   56,   43,   52,   57,   45,   53,   64,   58,
       59,   63,   54,   65,   60,   66,   69,   70,   72,   74,
       67,   71,   77,   75,   83,   45,   79,   73,   81,   45,
       45,   78,   76,   80,   45,   94,   45,   84,   38,   45,
       45,   85,   45,   82,   95,   86,   37,  102,   45,   45,
       87,   45,   45,   45,   45,   45,   45,   45,   88,   45,
       89,   96,   45,   90,   99,   45,   91,  100,   97,   98,
      106,   39,  109,   92,   45,  110,   45,   45,   93,  124,
      103,  104,  104,  104,  104,  111,  104,  104,  104,  104,

      104,  104,  123,  112,  114,  117,  105,  107,   45,  115,
      108,  118,   45,  113,  116,  120,  127,  119,  122,  126,
       45,  104,  104,  104,  104,  104,  104,   45,   45,   45,
      121,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,  125,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,  129,  128,  316,   45,  132,
       45,  130,   45,   45,  131,   45,   45,   45,  136,   45,
       45,  138,  135,  141,  155,   45,  133,  146,  140,  148,
      162,  145,  134,  156,  137,  149,  139,  147,  142,  143,
      144,  150,  163,  151,  157,  158,  152,  159,  153,  165,

      160,   38,  166,  164,  170,  167,  168,   38,  161,  154,
       37,  102,   45,  169,   45,   45,   45,   45,   45,   45,
       45,  171,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   39,   45,   45,   45,  173,  174,
       39,   45,   45,   45,  103,   45,  176,   45,   45,   45,
       45,  172,  179,   45,   45,  181,  177,  182,  183,   45,
       45,  180,  178,   45,   45,  191,  192,   45,  193,  188,
      184,   45,  197,  185,  186,  190,  189,  195,  198,  187,
      196,  205,  194,  182,  200,  203,  199,   45,  201,  202,
       45,   45,   45,   45,  204,   45,   45,   45,   45,  209,

       45,   45,   45,  206,   45,   45,   45,   45,   45,  207,
      208,   45,   45,   45,   45,  210,   45,   45,   45,  211,
       45,   45,   45,   45,   45,  215,   45,   45,   45,   45,
       45,  219,  223,  227,  224,  217,  225,  212,  213,  214,
      221,  216,  220,  226,  218,  231,  228,   45,  230,  222,
      234,   45,  229,  236,  238,  235,   45,   45,   45,  245,
      232,  233,   45,  242,  239,  247,  240,  237,  243,  244,
       45,  246,   45,   45,   45,   45,  241,   45,   45,   45,
       45,  251,  248,  252,   45,   45,   45,   45,   45,   45,
       45,   45,  257,   45,  254,  249,   45,  263,  264,   45,

       45,   45,   45,  255,  250,   45,   45,  265,   45,  253,
       45,  268,   45,   45,   45,  278,  256,   45,   45,   45,
      261,  267,  262,  258,  259,  260,  266,   45,  269,   45,
       45,  270,  273,   45,  271,  275,   45,  274,  277,  280,
       45,   45,  272,  276,   45,   45,   45,  286,   45,   45,
      279,  283,  292,  281,   45,  285,  282,  284,   45,  293,
       45,  287,  289,  288,  290,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,  291,   45,   45,  294,
      295,   45,   45,   45,  301,   45,  296,  302,  298,   45,
      297,  317,  299,  304,  300,   45,   45,   45,  308,   45,

      306,   45,   45,   45,   45,   45,  303,  305,  307,  310,
      311,   45,  313,  314,  315,  312,  309,  319,   45,   45,
      318,  320,   45,   45,   45,   45,  321,   45,   45,   45,
      322,   45,   45,  323,  327,   45,   45,  329,   45,  324,
      349,   45,   45,  326,  328,   45,  333,  325,  332,  339,
       45,   45,  340,   45,  330,  331,   45,  335,  342,   45,
       45,   45,  343,  338,   45,   45,   45,  334,  352,  344,
      346,  336,  353,  348,  350,  345,  355,   45,  347,  357,
       45,  356,  351,   45,  362,   45,   45,   45,  364,   45,
      354,   45,   45,   45,   45,   45,  358,  361,   45,   45,

      360,  366,  359,  370,  365,   45,   45,   45,   45,  363,
       45,   45,   45,  367,  369,   45,   45,   45,   45,   45,
      371,   45,   45,   45,  376,   45,   45,   45,  368,  377,
      372,   45,  373,   45,   45,   45,  378,   45,  382,   45,
      374,  375,  381,  384,   45,   45,   45,  379,  380,   45,
      383,  385,  387,  389,  386,  395,  390,  391,  392,   45,
      386,   45,   45,  388,  393,   45,  396,  398,  400,  397,
      399,   45,  394,   45,  401,   45,   45,  403,   45,   45,
      402,   45,   45,   45,   45,   45,   45,   45,  404,  406,
       45,  405,   45,   45,   45,   45,  407,   45,   45,   45,

      408,   45,   45,   45,   45,   45,   45,   45,  411,  416,
      410,  415,  409,   45,  412,   45,  414,  419,  417,  413,
      421,   45,   45,   45,   45,   45,  426,   45,   45,  433,
      422,  420,  423,  418,  427,  424,  425,  430,  435,  432,
       45,  428,  429,  438,  440,  431,   45,  434,  437,  439,
      436,   45,   45,  447,  450,   45,  449,   45,   45,  445,
      448,   45,   45,   45,  442,  441,  443,   45,   45,  444,
       45,  446,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
      453,  454,  477,   45,   45,   45,  452,  457,  459,  451,

       45,   45,   45,   45,   45,  456,   45,  460,  463,   45,
      455,  453,  464,   45,  458,  461,   45,   45,   45,  462,
      438,   45,  466,  465,  468,  469,  467,  466,  470,  472,
      474,  471,  475,   45,   45,  476,   45,  473,   45,  478,
       45,   45,   45,   45,  479,  480,  480,   37,   37,   37,
       37,   40,   45,   40,   40,   46,   46,  101,  101,  101,
      101,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       36,   45,   36,  481,    3,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481
    } ;

static const flex_int16_t yy_chk[1077] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,   10,   10,   11,   11,   11,   11,   13,   17,
       16,   15,   20,   14,   18,   41,   41,   44,   44,   44,
       44,  300,  295,   21,   19,   29,  484,  300,  107,   10,
      295,  480,   23,   24,    7,  477,  473,   26,   25,  107,

       27,   13,   13,   17,   14,   16,   15,   28,   14,   13,
       32,   20,   15,   10,   14,   15,   30,   14,   18,   15,
       15,   17,   14,   18,   15,   19,   21,   23,   24,   25,
       19,   23,   26,   25,   29,   31,   27,   24,   28,   34,
       33,   26,   25,   27,   35,   32,   48,   30,   37,   50,
       51,   30,   62,   28,   32,   30,   39,   39,   47,   49,
       30,   61,   55,   53,   52,  472,   54,   56,   31,   58,
       31,   33,   57,   31,   34,   65,   31,   35,   33,   33,
       48,   37,   50,   31,   59,   51,   64,   60,   31,   62,
       39,   43,   43,   43,   43,   52,   43,   43,   43,   43,

       43,   43,   61,   52,   53,   55,   47,   49,   63,   53,
       49,   56,   66,   52,   54,   58,   65,   57,   60,   64,
       67,   43,   43,   43,   43,   43,   43,   68,   69,   70,
       59,   71,   72,   73,   74,   75,   78,   86,   77,   76,
       81,   79,   87,   63,   82,   91,   83,  470,   88,  469,
      269,  468,   84,   94,   89,   67,   66,  269,   92,   69,
       93,   68,   85,   99,   68,   95,   96,   97,   72,   90,
       98,   74,   71,   76,   86,  100,   69,   79,   75,   82,
       91,   78,   70,   87,   73,   83,   74,   81,   76,   76,
       77,   84,   92,   85,   88,   89,   85,   89,   85,   94,

       90,  101,   95,   93,   99,   96,   97,  102,   90,   85,
      103,  103,  105,   98,  106,  108,  109,  110,  112,  111,
      113,  100,  116,  114,  115,  117,  119,  118,  120,  121,
      123,  124,  122,  126,  101,  125,  127,  129,  106,  106,
      102,  136,  139,  130,  103,  131,  108,  135,  128,  133,
      137,  105,  111,  132,  140,  113,  109,  114,  115,  138,
      141,  112,  110,  142,  143,  123,  124,  144,  125,  120,
      116,  147,  129,  117,  118,  122,  121,  127,  130,  119,
      128,  139,  126,  131,  133,  137,  132,  148,  135,  136,
      149,  151,  150,  155,  138,  153,  154,  158,  162,  143,

      159,  156,  160,  140,  164,  157,  165,  161,  166,  141,
      142,  163,  167,  168,  170,  144,  169,  172,  171,  147,
      174,  173,  175,  176,  183,  151,  177,  184,  179,  180,
      185,  155,  158,  162,  159,  154,  160,  148,  149,  150,
      157,  153,  156,  161,  154,  166,  163,  186,  165,  157,
      169,  189,  164,  171,  173,  170,  191,  192,  193,  183,
      167,  168,  194,  177,  174,  185,  175,  172,  179,  180,
      195,  184,  196,  197,  198,  199,  176,  204,  200,  203,
      205,  192,  186,  193,  206,  207,  208,  209,  217,  219,
      224,  226,  198,  211,  195,  189,  214,  206,  206,  216,

      221,  218,  222,  196,  191,  223,  225,  206,  227,  194,
      228,  209,  233,  229,  231,  224,  197,  234,  230,  235,
      204,  208,  205,  199,  200,  203,  207,  236,  211,  237,
      238,  214,  218,  241,  216,  221,  240,  219,  223,  226,
      242,  239,  217,  222,  245,  246,  247,  233,  249,  250,
      225,  229,  239,  227,  251,  231,  228,  230,  252,  239,
      254,  234,  236,  235,  237,  257,  255,  259,  261,  258,
      262,  263,  264,  271,  270,  273,  238,  265,  266,  240,
      241,  268,  272,  275,  250,  277,  242,  251,  246,  276,
      245,  270,  247,  254,  249,  278,  279,  282,  259,  283,

      257,  284,  285,  287,  288,  289,  252,  255,  258,  262,
      263,  291,  265,  266,  268,  264,  261,  272,  292,  296,
      271,  273,  293,  294,  302,  303,  275,  304,  298,  305,
      276,  306,  307,  277,  283,  308,  310,  285,  313,  278,
      305,  309,  311,  282,  284,  312,  291,  279,  289,  298,
      315,  301,  298,  316,  287,  288,  317,  293,  301,  318,
      319,  320,  301,  296,  321,  323,  325,  292,  308,  301,
      302,  294,  309,  304,  306,  301,  311,  324,  303,  313,
      327,  312,  307,  328,  319,  333,  330,  334,  321,  335,
      310,  337,  338,  339,  340,  341,  315,  318,  342,  343,

      317,  324,  316,  330,  323,  345,  346,  344,  348,  320,
      349,  350,  356,  325,  328,  352,  359,  351,  354,  355,
      333,  360,  362,  358,  339,  365,  357,  369,  327,  340,
      334,  368,  335,  364,  366,  370,  341,  371,  345,  373,
      337,  338,  344,  348,  372,  374,  375,  342,  343,  376,
      346,  349,  351,  354,  355,  362,  356,  357,  358,  377,
      350,  378,  379,  352,  359,  380,  364,  366,  369,  365,
      368,  381,  360,  382,  370,  383,  384,  372,  385,  388,
      371,  391,  392,  393,  395,  394,  396,  400,  373,  375,
      398,  374,  397,  399,  401,  405,  376,  407,  409,  410,

      377,  412,  414,  406,  408,  411,  415,  416,  380,  385,
      379,  384,  378,  413,  381,  417,  383,  392,  388,  382,
      394,  419,  420,  421,  422,  425,  399,  423,  427,  409,
      395,  393,  396,  391,  400,  397,  398,  406,  411,  408,
      426,  401,  405,  414,  416,  407,  424,  410,  413,  415,
      412,  428,  429,  424,  427,  431,  426,  433,  432,  422,
      425,  434,  437,  441,  419,  417,  420,  440,  443,  421,
      447,  423,  445,  448,  446,  450,  452,  449,  454,  461,
      455,  456,  457,  462,  464,  460,  463,  471,  466,  474,
      431,  432,  474,  467,  465,  475,  429,  437,  441,  428,

      476,  459,  478,  479,  458,  434,  453,  445,  448,  451,
      433,  443,  449,  444,  440,  446,  442,  439,  438,  447,
      461,  436,  452,  450,  456,  457,  454,  455,  460,  463,
      465,  462,  467,  435,  430,  471,  418,  464,  404,  475,
      403,  402,  390,  389,  476,  478,  479,  482,  482,  482,
      482,  483,  387,  483,  483,  485,  485,  486,  486,  486,
      486,  487,  487,  386,  367,  363,  361,  353,  347,  336,
      332,  331,  329,  326,  322,  314,  299,  297,  290,  286,
      281,  280,  274,  267,  260,  256,  253,  248,  244,  243,
      232,  220,  215,  213,  212,  210,  202,  201,  190,  188,

      187,  182,  181,  178,  152,  146,  145,  134,   80,   46,
       36,   22,    5,    3,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "rcparse.l"
/* clang-format off */
#line 4 "rcparse.l"
/* -*-c-*-
 *
 *  rcparse.l  --  lex back-end of ~/.config/twin/twinrc parser for twin
 *
 *  Copyright (C) 2000-2001 by Massimiliano Ghilardi
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 */


#include "twin.h"
#include "alloc.h"
#include "rctypes.h"
#include "rcparse_tab.hpp"

#define IS_OCTDIGIT(c) ((c) >= '0' && (c) <= '7')
#define IS_HEXDIGIT(c) (((c) >= '0' && (c) <= '9') || ((c) >= 'A' && (c) <= 'F') || ((c) >= 'a' && (c) <= 'f'))
#define HEX2INT(c)     ((c) >= 'a' ? (c) - 'a' + 10 : (c) >= 'A' ? (c) - 'A' + 10 : (c) - '0')

#define MAX_READ_DEPTH 64
static YY_BUFFER_STATE read_stack[MAX_READ_DEPTH];
int read_stack_curr = 0;
char *file_name[MAX_READ_DEPTH];
int line_no[MAX_READ_DEPTH];

static int yywrap(void);

static char errbuf[256];

#ifdef PURE_PARSER
# define YY_DECL int yylex(YYSTYPE *_yylval, void *yylloc)
# define yylval (*_yylval)
#endif

#define YY_SKIP_YYWRAP
#define YY_NO_SCAN_BYTES
#define YY_NO_SCAN_STRING
#define YY_NO_UNPUT
#define YY_NO_SCAN_BUFFER
/*#undef  YY_STACK_USED*/

#define YY_USE_PROTOS

#line 887 "rcparse_lex.cpp"
#line 888 "rcparse_lex.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 69 "rcparse.l"


#line 1108 "rcparse_lex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 482 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1015 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 71 "rcparse.l"
return ADDSCREEN;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 72 "rcparse.l"
return ADDTOFUNC;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 73 "rcparse.l"
return ADDTOMENU;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 74 "rcparse.l"
return BACKGROUND;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 75 "rcparse.l"
return BORDER;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 76 "rcparse.l"
return BUTTON;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 77 "rcparse.l"
return DELETEFUNC;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 78 "rcparse.l"
return DELETEMENU;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 79 "rcparse.l"
return DELETEBUTTON;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 80 "rcparse.l"
return DELETESCREEN;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 81 "rcparse.l"
return EXEC;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 82 "rcparse.l"
return EXECTTY;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 83 "rcparse.l"
return GLOBALFLAGS;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 84 "rcparse.l"
return INTERACTIVE;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 85 "rcparse.l"
return KEY;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 86 "rcparse.l"
return MENU;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 87 "rcparse.l"
return MOUSE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 88 "rcparse.l"
return MODULE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 89 "rcparse.l"
return MOVE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 90 "rcparse.l"
return MOVESCREEN;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 91 "rcparse.l"
return NEXT;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 92 "rcparse.l"
return PREV;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 93 "rcparse.l"
return READ;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 94 "rcparse.l"
return RESTART;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 95 "rcparse.l"
return RESIZE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 96 "rcparse.l"
return RESIZESCREEN;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 97 "rcparse.l"
return SCREEN;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 98 "rcparse.l"
return SCROLL;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 99 "rcparse.l"
return SENDTOSCREEN;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 100 "rcparse.l"
return STDERR;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 101 "rcparse.l"
return SLEEP;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 102 "rcparse.l"
return SYNTHETICKEY;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 103 "rcparse.l"
return WAIT;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 104 "rcparse.l"
return WINDOW;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 106 "rcparse.l"
{ yylval.val = FOCUS;      return FLAG_FUNC; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 107 "rcparse.l"
{ yylval.val = ROLL;       return FLAG_FUNC; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 109 "rcparse.l"
{ yylval.val = BEEP;       return EASY_FUNC; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 110 "rcparse.l"
{ yylval.val = CENTER;     return EASY_FUNC; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 111 "rcparse.l"
{ yylval.val = CLOSE;      return EASY_FUNC; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 112 "rcparse.l"
{ yylval.val = COPY;       return EASY_FUNC; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 113 "rcparse.l"
{ yylval.val = FULLSCREEN; return EASY_FUNC; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 114 "rcparse.l"
{ yylval.val = KILL;       return EASY_FUNC; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 115 "rcparse.l"
{ yylval.val = LOWER;      return EASY_FUNC; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 116 "rcparse.l"
{ yylval.val = MAXIMIZE;   return EASY_FUNC; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 117 "rcparse.l"
{ yylval.val = NOP;        return EASY_FUNC; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 118 "rcparse.l"
{ yylval.val = PASTE;      return EASY_FUNC; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 119 "rcparse.l"
{ yylval.val = QUIT;       return EASY_FUNC; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 120 "rcparse.l"
{ yylval.val = RAISE;      return EASY_FUNC; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 121 "rcparse.l"
{ yylval.val = RAISELOWER; return EASY_FUNC; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 122 "rcparse.l"
{ yylval.val = REFRESH;    return EASY_FUNC; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 123 "rcparse.l"
{ yylval.val = WINDOWLIST; return EASY_FUNC; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 125 "rcparse.l"
return FL_ON;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 126 "rcparse.l"
return FL_OFF;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 127 "rcparse.l"
return FL_TOGGLE;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 128 "rcparse.l"
return FL_ACTIVE;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 129 "rcparse.l"
return FL_INACTIVE;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 130 "rcparse.l"
return FL_LEFT;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 131 "rcparse.l"
return FL_RIGHT;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 132 "rcparse.l"
return BUTTON_PASTE;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 133 "rcparse.l"
return BUTTON_SELECTION;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 134 "rcparse.l"
return SHADOWS;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 136 "rcparse.l"
{ yylval.val = ALTFONT;      return GLOBAL_FLAG; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 137 "rcparse.l"
{ yylval.val = BLINK;        return GLOBAL_FLAG; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 138 "rcparse.l"
{
               yylval.val = CURSOR_ALWAYS;return GLOBAL_FLAG; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 140 "rcparse.l"
{
               yylval.val = MENU_HIDE;    return GLOBAL_FLAG; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 142 "rcparse.l"
{ yylval.val = MENU_INFO;    return GLOBAL_FLAG; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 143 "rcparse.l"
{ yylval.val = MENU_RELAX;   return GLOBAL_FLAG; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 144 "rcparse.l"
{
               yylval.val = SCREEN_SCROLL;return GLOBAL_FLAG; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 146 "rcparse.l"
{ yylval.val = TERMINALS_UTF8; return GLOBAL_FLAG; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 147 "rcparse.l"
{ yylval.val = KBD_ALT_FL;   return KBD_FLAG; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 148 "rcparse.l"
{ yylval.val = KBD_CTRL_FL;  return KBD_FLAG; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 149 "rcparse.l"
{ yylval.val = KBD_SHIFT_FL; return KBD_FLAG; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 151 "rcparse.l"
{ yylval.val = tblack;    return COLOR; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 152 "rcparse.l"
{ yylval.val = tblue;     return COLOR; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 153 "rcparse.l"
{ yylval.val = tgreen;    return COLOR; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 154 "rcparse.l"
{ yylval.val = tcyan;     return COLOR; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 155 "rcparse.l"
{ yylval.val = tred;      return COLOR; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 156 "rcparse.l"
{ yylval.val = tmagenta;  return COLOR; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 157 "rcparse.l"
{ yylval.val = tyellow;   return COLOR; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 158 "rcparse.l"
{ yylval.val = twhite;    return COLOR; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 159 "rcparse.l"
return COL_HIGH;
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 161 "rcparse.l"
{ LINE_NO++; return '\n'; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 163 "rcparse.l"
{ return '\n'; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 165 "rcparse.l"
/* eat comments */
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 167 "rcparse.l"
{
            yylval._string = my_strdup(yytext);
            return STRING;
        }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 172 "rcparse.l"
{
            yylval.val = strtol(yytext, NULL, 0);
            return NUMBER;
        }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 177 "rcparse.l"
return (unsigned char)yytext[0];
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 179 "rcparse.l"
{
            sprintf(errbuf, "twin: %.200s:%d: invalid identifier `%s'\n",
                FILE_NAME, LINE_NO, yytext);
            YY_FATAL_ERROR(errbuf);
        }
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 185 "rcparse.l"
{
            int len = strlen(yytext + 1);
            char c, *p = yytext + 1;
            char *res = (char *)my_malloc(len), *s = res;

            while ((c = *p)) {
                if (c != '\\' || !p[1])
                *s++ = *p++;
                else switch(*++p) {
                  case 'a': *s++ = '\a'; break;
                  case 'b': *s++ = '\b'; break;
                  case 'e': *s++ = '\033'; break;
                  case 'f': *s++ = '\f'; break;
                  case 'n': *s++ = '\n'; break;
                  case 'r': *s++ = '\r'; break;
                  case 't': *s++ = '\t'; break;
                  case 'v': *s++ = '\v'; break;
                  case '0': *s++ = '\0'; break;
                  case 'u':
                /* FIXME: unicode is ok, but s is a (char *), not (trune *) ! */
                if (IS_HEXDIGIT(p[1]) &&
                    IS_HEXDIGIT(p[2]) &&
                    IS_HEXDIGIT(p[3]) &&
                    IS_HEXDIGIT(p[4])) {
                    *s++ = (((HEX2INT(p[1]) << 4) | HEX2INT(p[2])) << 8)
                        | ((HEX2INT(p[3]) << 4) | HEX2INT(p[2]));
                    p += 5;
                }
                break;
                  case 'x':
                if (IS_HEXDIGIT(p[1]) &&
                    IS_HEXDIGIT(p[2])) {
                    *s++ = (HEX2INT(p[1]) << 4)    | HEX2INT(p[2]);
                    p += 3;
                }
                break;
                  default:
                if (IS_OCTDIGIT(p[0]) &&
                    IS_OCTDIGIT(p[1]) &&
                    IS_OCTDIGIT(p[2])) {
                    *s++ = ((p[0] - '0') << 6)
                    | ((p[1] - '0') << 3)
                    |  (p[2] - '0');
                    p += 3;
                } else if (*p == '0')
                    *s++ = '\0', p++;
                else
                    *s++ = *p++;
                break;
                }
            }
            s[-1] = '\0'; /* overwrite final \" */
            yylval._string = res;
            return STRING;
        }
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 241 "rcparse.l"
{
        char *buf = (char *)AllocMem(256 + strlen(yytext));
        if (buf) {
            sprintf(buf, "twin: %.200s:%d: unterminated string:\n%s\n",
                FILE_NAME, LINE_NO, yytext);
                YY_FATAL_ERROR(buf);
            } else {
            YY_FATAL_ERROR("twin: unterminated string\n");
        }
    }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 252 "rcparse.l"
/* eat whitespace */
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 255 "rcparse.l"
{
            unsigned char ch = yytext[0];
            sprintf(errbuf, "twin: %.200s:%d: illegal character 0x%02X",
                FILE_NAME, LINE_NO, ch);
                    if (ch >= 32 && ch < 127) {
            sprintf(errbuf + strlen(errbuf), " `%c'\n", ch);
                    } else
            strcat(errbuf, "\n");
            YY_FATAL_ERROR(errbuf);
        }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 266 "rcparse.l"
ECHO;
	YY_BREAK
#line 1718 "rcparse_lex.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 482 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 482 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 481);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 266 "rcparse.l"



int set_yy_file(const char *path) {
    uldat len;
    FILE *f;

    if (!path)
        return 1;

    if (read_stack_curr >= MAX_READ_DEPTH) {
        fprintf(stderr, "twin: %s:%d: `Read' commands nested too deeply!\n",
            FILE_NAME, LINE_NO);
        return 0;
    }

    if (!(f = fopen(path, "r")))
        return 1;

    len = strlen(path) + 1;

    read_stack[read_stack_curr++] = YY_CURRENT_BUFFER;
    LINE_NO = 1;
    FILE_NAME = (char *)my_malloc(len);
    CopyMem(path, FILE_NAME, len);

    yy_switch_to_buffer(yy_create_buffer(yyin = f, YY_BUF_SIZE));
    BEGIN(INITIAL);
    return 0;
}

static int yywrap(void) {
    if ( read_stack_curr > 0 ) {
    fclose(yyin);
    yy_delete_buffer( YY_CURRENT_BUFFER );
    yy_switch_to_buffer(read_stack[--read_stack_curr]);
    BEGIN(INITIAL);
    }
    return read_stack_curr <= 0;
}

